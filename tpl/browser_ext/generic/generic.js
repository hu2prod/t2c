// Generated by IcedCoffeeScript 108.0.13

/* !pragma coverage-skip-block */

(function() {
  var deep_clone, timer, __, _base, _base1, _base2, _base3, _base4, _base5;

  if (window.console == null) {
    window.console = {};
  }

  if ((_base = window.console).log == null) {
    _base.log = function() {};
  }

  if ((_base1 = window.console.log).bind == null) {
    _base1.bind = function() {
      return function() {};
    };
  }

  if ((_base2 = window.console).error == null) {
    _base2.error = function() {};
  }

  if ((_base3 = window.console.error).bind == null) {
    _base3.bind = function() {
      return function() {};
    };
  }

  if (Date.now == null) {
    Date.now = function() {
      return new Date().getTime();
    };
  }

  if ((_base4 = String.prototype).trim == null) {
    _base4.trim = function() {
      return this.replace(/^[\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF\xA0]+|[\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF\xA0]+$/g, '');
    };
  }

  if (Object.keys == null) {
    Object.keys = function(t) {
      var k, ret;
      ret = [];
      for (k in t) {
        ret.push(k);
      }
      return ret;
    };
  }

  if ((_base5 = Array.prototype).indexOf == null) {
    _base5.indexOf = function(t) {
      var k, v, _i, _len;
      for (k = _i = 0, _len = this.length; _i < _len; k = ++_i) {
        v = this[k];
        if (v === t) {
          return k;
        }
      }
      return -1;
    };
  }

  String.prototype.to_s = function() {
    return this.toString();
  };

  window.p = console.log.bind(console);

  window.puts = console.log.bind(console);

  window.pe = console.error.bind(console);

  window.perr = console.error.bind(console);

  window.print = console.log.bind(console);

  window.println = console.log.bind(console);

  Array.prototype.to_s = Array.prototype.toString;

  Number.prototype.to_s = Number.prototype.toString;

  String.prototype.reverse = function() {
    return this.split('').reverse().join('');
  };

  String.prototype.capitalize = function() {
    return this.substr(0, 1).toUpperCase() + this.substr(1);
  };

  String.prototype.center = function(length, char) {
    var append_end, append_length, append_start;
    if (char == null) {
      char = ' ';
    }
    append_length = Math.max(0, length - this.length) / 2;
    append_start = new Array(Math.ceil(append_length) + 1).join(char);
    append_end = new Array(Math.floor(append_length) + 1).join(char);
    return append_start + this + append_end;
  };

  String.prototype.ljust = function(length, char) {
    var append;
    if (char == null) {
      char = ' ';
    }
    append = new Array(Math.max(0, length - this.length) + 1).join(char);
    append = append.substr(0, length - this.length);
    return this + append;
  };

  String.prototype.rjust = function(length, char) {
    var append;
    if (char == null) {
      char = ' ';
    }
    append = new Array(Math.max(0, length - this.length) + 1).join(char);
    append = append.substr(0, length - this.length);
    return append + this;
  };

  String.prototype.repeat = function(count) {
    var res;
    res = new Array(count + 1);
    return res.join(this);
  };

  Number.prototype.ljust = function(length, char) {
    if (char == null) {
      char = ' ';
    }
    return this.toString().ljust(length, char);
  };

  Number.prototype.rjust = function(length, char) {
    if (char == null) {
      char = ' ';
    }
    return this.toString().rjust(length, char);
  };

  Number.prototype.center = function(length, char) {
    if (char == null) {
      char = ' ';
    }
    return this.toString().center(length, char);
  };

  Number.prototype.repeat = function(count) {
    return this.toString().repeat(count);
  };

  timer = null;

  window.tic = function() {
    return timer = new Date;
  };

  window.toc = function() {
    return (new Date - timer) / 1000;
  };

  window.ptoc = function() {
    return console.log(toc().toFixed(3) + ' s');
  };

  window.call_later = function(cb) {
    return setTimeout(cb, 0);
  };

  if (window.requestAnimationFrame == null) {
    window.requestAnimationFrame = call_later;
  }

  window.once_interval = function(timer, cb, interval) {
    if (interval == null) {
      interval = 100;
    }
    if (!timer) {
      return setTimeout(cb, interval);
    }
    return timer;
  };

  window.call_later_replace = function(timer, cb, timeout) {
    if (timeout == null) {
      timeout = 0;
    }
    if (timer) {
      clearTimeout(timer);
    }
    return setTimeout(cb, timeout);
  };

  Array.prototype.has = function(t) {
    return -1 !== this.indexOf(t);
  };

  Array.prototype.upush = function(t) {
    if (-1 === this.indexOf(t)) {
      this.push(t);
    }
  };

  Array.prototype.clone = Array.prototype.slice;

  Array.prototype.clear = function() {
    return this.length = 0;
  };

  Array.prototype.idx = Array.prototype.indexOf;

  Array.prototype.remove_idx = function(idx) {
    if (idx < 0 || idx >= this.length) {
      return this;
    }
    this.splice(idx, 1);
    return this;
  };

  Array.prototype.remove = function(t) {
    this.remove_idx(this.idx(t));
    return this;
  };

  Array.prototype.last = Array.prototype.end = function() {
    return this[this.length - 1];
  };

  Array.prototype.insert_after = function(idx, t) {
    this.splice(idx + 1, 0, t);
    return t;
  };

  Array.prototype.append = function(list) {
    var v, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      v = list[_i];
      this.push(v);
    }
    return this;
  };

  Array.prototype.uappend = function(list) {
    var v, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      v = list[_i];
      this.upush(v);
    }
    return this;
  };

  window.h_count = window.count_h = window.hash_count = window.count_hash = function(t) {
    var k, ret;
    ret = 0;
    for (k in t) {
      ret++;
    }
    return ret;
  };

  window.count = function(t) {
    var k, ret;
    if (t instanceof Array) {
      return t.length;
    }
    ret = 0;
    for (k in t) {
      ret++;
    }
    return ret;
  };

  __ = {};

  __.isObject = function(obj) {
    return obj === Object(obj);
  };

  __.isArray = Array.isArray || function(obj) {
    return obj instanceof Array;
  };

  __.copy_obj = function(obj) {
    var k, ret, v;
    ret = {};
    for (k in obj) {
      v = obj[k];
      ret[k] = v;
    }
    return ret;
  };

  __.clone = function(obj) {
    if (!__.isObject(obj)) {
      return obj;
    }
    if (__.isArray(obj)) {
      return obj.slice();
    } else {
      return __.copy_obj(obj);
    }
  };

  window.clone = __.clone;

  window.deep_clone = deep_clone = function(obj) {
    var k, res, v, _i, _len;
    if (obj instanceof Array) {
      res = [];
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        v = obj[_i];
        res.push(deep_clone(v));
      }
      return res;
    }
    if (_.isObject(obj)) {
      res = {};
      for (k in obj) {
        v = obj[k];
        res[k] = deep_clone(v);
      }
      return res;
    }
    return obj;
  };

  window.obj_set = Object.assign

  window.obj_clear = function(t) {
    var k, v;
    for (k in t) {
      v = t[k];
      delete t[k];
    }
    return t;
  };

  Array.prototype.set = function(t) {
    var k, v, _i, _len;
    this.length = t.length;
    for (k = _i = 0, _len = t.length; _i < _len; k = ++_i) {
      v = t[k];
      this[k] = v;
    }
    return this;
  };

  window.arr_set = function(dst, src) {
    var k, v, _i, _len;
    dst.length = src.length;
    for (k = _i = 0, _len = src.length; _i < _len; k = ++_i) {
      v = src[k];
      dst[k] = v;
    }
    return dst;
  };

  window.array_merge = window.arr_merge = function(a, b) {
    return a.concat(b);
  };

  window.obj_merge = function() {
    var a, k, ret, v, _i, _len;
    ret = {};
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      a = arguments[_i];
      for (k in a) {
        v = a[k];
        ret[k] = v;
      }
    }
    return ret;
  };

  RegExp.escape = function(text) {
    return text.replace(/([-\/[\]{}()*+?.,\\^$|#\s])/g, "\\$1");
  };

  if (window.devicePixelRatio == null) {
    window.devicePixelRatio = 1;
  }

  JSON.eq = function(a, b) {
    return JSON.stringify(a) === JSON.stringify(b);
  };

  JSON.ne = function(a, b) {
    return JSON.stringify(a) !== JSON.stringify(b);
  };

  Promise.prototype.cb = function(cb) {
    var used, wrap_cb;
    used = false;
    wrap_cb = function(err, res) {
      if (!used) {
        used = true;
        cb(err, res);
      }
    };
    return this["catch"]((function(_this) {
      return function(err) {
        return wrap_cb(err);
      };
    })(this)).then((function(_this) {
      return function(res) {
        return wrap_cb(null, res);
      };
    })(this));
  };
}).call(this);
