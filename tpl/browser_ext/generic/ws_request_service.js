// Generated by IcedCoffeeScript 108.0.13

/* !pragma coverage-skip-block */

(function() {
  window.Ws_request_service = (function() {
    Ws_request_service.prototype.ws = null;

    Ws_request_service.prototype.request_uid = 0;

    Ws_request_service.prototype.response_hash = {};

    Ws_request_service.prototype.interval = 30000;

    Ws_request_service.prototype.timeout = 30000;

    function Ws_request_service(ws) {
      this.ws = ws;
      this.response_hash = {};
      this.ws.on("data", (function(_this) {
        return function(data) {
          var cb;
          if (data.request_uid != null) {
            if (_this.response_hash[data.request_uid] != null) {
              cb = _this.response_hash[data.request_uid].callback;
              if (data.error) {
                cb(new Error(data.error), data);
              } else {
                cb(null, data);
              }
            } else {
              perr("missing request_uid = " + data.request_uid + ". Possible timeout");
            }
          }
        };
      })(this));
      setTimeout((function(_this) {
        return function() {
          return setInterval(function() {
            var k, now, v, _ref;
            now = Date.now();
            _ref = _this.response_hash;
            for (k in _ref) {
              v = _ref[k];
              if (now > v.end_ts) {
                delete _this.response_hash[k];
                perr("ws_request_service timeout");
                perr(v.hash);
                perr(v.callback_orig.toString());
                v.callback(new Error("timeout"));
              }
            }
          }, _this.interval);
        };
      })(this));
    }

    Ws_request_service.prototype.request = function(hash, handler, opt) {
      var callback, err_handler;
      if (opt == null) {
        opt = {};
      }
      err_handler = null;
      callback = (function(_this) {
        return function(err, res) {
          _this.ws.off("error", err_handler);
          if (err || !res.continious_request) {
            delete _this.response_hash[hash.request_uid];
          }
          if (res != null) {
            delete res.request_uid;
          }
          return handler(err, res);
        };
      })(this);
      this.ws.once("error", err_handler = (function(_this) {
        return function(err) {
          return callback(err);
        };
      })(this));
      hash.request_uid = this.request_uid++;
      this.response_hash[hash.request_uid] = {
        hash: hash,
        callback: callback,
        callback_orig: handler,
        end_ts: Date.now() + (opt.timeout || this.timeout)
      };
      this.ws.write(hash);
      return hash.request_uid;
    };

    Ws_request_service.prototype.send = Ws_request_service.prototype.request;

    return Ws_request_service;

  })();

}).call(this);
